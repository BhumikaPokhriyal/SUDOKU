#include <iostream>
#include <fstream>
using namespace std;

class SudokuManual
{

    int sudokuManual[9][9];  // This pointer will hold all the values in the matrix.
    int editableFrame[9][9]; // This pointer will tell us all the values which are editable.
public:
    SudokuManual()
    {
        menu();
    }

private:
    void menu()
    {

        cout << "\n======================\n";
        cout << "    Sudoku Solver\n";
        cout << "======================\n\n";

        cout << "Welcome to Sudoku Solver!\n";
        cout << "Before we start, you will have to input the puzzle into this program.\n\n";
        cout << "You can either:-\n";
        cout << "\t1. Input the puzzle by entering the values manually. (Enter 1)\n";
        cout << "\t2. Input the puzzle by reading a file with values in it. (Enter 2)\n";
        cout << "\t   The file must not have a name > 20 characters.\n";
        cout << "\t   The file must be in the same directory as this C++ file.\n";
        cout << "\t   The file must have all 81 values seperated with spaces.\n";
        cout << "\t   Blank cells must be filled in as 0 (eg; 1 0 0 2 0 0 ...).\n";
        cout << "\t   --> ";

        int option;
        cin >> option;

        if (option == 1)
            readFrameValues();
        else if (option == 2)
            readFrameValuesFile();
        else
        {
            while (true)
            {
                cout << "\nYou seem to have entered an invalid option. Try again.\n";
                cout << "\t   --> ";
                cin >> option;

                if (option == 1)
                    readFrameValues();
                else if (option == 2)
                    readFrameValuesFile();
                else
                    continue;

                break;
            }
        }
    }

private:
    void readFrameValues()
    {
        cout << "\nEnter the specified value when prompted.\n";
        cout << "Enter 0 if cell is empty.\n\n";

        int i, j;

        for (i = 0; i < 9; i++)
        { // Iterating over cells to read vals.
            for (j = 0; j < 9; j++)
            {
                int enteredValue;

                cout << "Enter value for cell[" << i + 1 << "][" << j + 1 << "] --> ";
                cin >> enteredValue;

                if (!(enteredValue >= 0 && enteredValue <= 9))
                { // Checking for bounds in input.
                    while (true)
                    { // We loop until valid input is read from user.
                        cout << "Oops! You seem to have entered a wrong value! Try again.\n";
                        cout << "Enter value for cell [" << i + 1 << "][" << j + 1 << "] --> ";
                        cin >> enteredValue;

                        if (enteredValue >= 0 && enteredValue <= 9)
                            break;
                    }
                }

                sudokuManual[i][j] = enteredValue;

                if (enteredValue == 0)
                    editableFrame[i][j] = 0;
                else
                    editableFrame[i][j] = 1;
            }
            cout << "-------\n"; // Display a break after every row for convenience.
        }
    }

private:
    void readFrameValuesFile()
    {

        char filename[30]; // Getting filename.

        cout << "\nEnter the name of the file that contains the Sudoku Puzzle.\n";
        cout << "\t   --> ";
        cin >> filename;

        ifstream sudokuFile; // Opening file for reading.
        sudokuFile.open(filename, ios::in);

        int i, j;

        for (i = 0; i < 9; i++)
        { // Iterating over file values.
            for (j = 0; j < 9; j++)
            {
                int readValue;

                sudokuFile >> readValue;

                if (!(readValue >= 0 && readValue <= 9))
                { // Checking bounds for input.
                    cout << "\nValue " << ((i * 9) + j + 1) << " in " << filename;
                    cout << " seems to be wrong! Correct the value and try again!\n";
                    exit(EXIT_FAILURE);
                }

                sudokuManual[i][j] = readValue;

                if (sudokuManual[i][j] == 0)
                    editableFrame[i][j] = 0;
                else
                    editableFrame[i][j] = 1;

                if (sudokuFile.eof())
                    break; // Breaking if EOF is reached.
            }
        }

        sudokuFile.close();
    }

public:
    void setCellValue(int row, int col, int num)
    {
        if (editableFrame[row][col] == 0)
            sudokuManual[row][col] = num;
    }

public:
    int getCellValue(int row, int col)
    {
        int cellValue = sudokuManual[row][col];
        return cellValue;
    }

public:
    int isEditable(int row, int col)
    {
        return (editableFrame[row][col] - 1) * (-1);
    }
public:
    void clearFrameFrom(int row, int col)
    {
        int jcount = 0;
        int i, j;

        for (i = row; i < 9; i++)
        {

            if (jcount == 0)
                j = col;
            else
                j = 0;

            for (; j < 9; j++)
            {
                if (editableFrame[i][j] == 0)
                    sudokuManual[i][j] = 0;
            }

            jcount++;
        }
    }

public:
    void displayFrame()
    {

        cout << "\033[0;36m++=====================================++";
        int i, j;

        for (i = 0; i < 9; i++)
        {
            int cellIter = 1;

            cout << "\n\033[0;36m||";
            for (j = 0; j < 9; j++)
            {
                if (cellIter == 3)
                {
                    cout << "\033[0m " << sudokuManual[i][j] << " ";
                    cout << "\033[0;36m||";
                    cellIter = 1;
                }
                else
                {
                    cout << "\033[0m " << sudokuManual[i][j] << "  ";
                    cellIter++;
                }
            }

            if (i % 3 != 2)
                cout << "\n\033[0;36m++-----------++-----------++-----------++";
            else
                cout << "\n\033[0;36m++=====================================++";
        }
    }
};
class Backtracking
{

    struct node
    {
        int value;
        struct node *next;
    }; // The struct for the node

    typedef struct node *Node;

    Node head; // The head node
    Node pos;

public:
    Backtracking()
    {
        head = new struct node;
        head->next = NULL;
    }

public:
    ~Backtracking()
    {
        destroy();
    }

public:
    void append(int number)
    {
        Node temp = new struct node;

        temp->value = number;
        temp->next = NULL;

        pos = head;
        while (pos != NULL)
        {
            if (pos->next == NULL)
            {
                pos->next = temp;
                break;
            }
            pos = pos->next;
        }
    }

public:
    int operator[](int index)
    {
        int count = 0;
        pos = head->next;

        while (pos != NULL)
        {
            if (count == index)
                return pos->value;
            pos = pos->next;
            count++;
        }

        return -1;
    }

public:
    void print()
    {
        pos = head->next;
        while (pos != NULL)
        {
            cout << pos->value << ",";
            pos = pos->next;
        }
        cout << "\b";
    }

public:
    int length()
    {
        pos = head->next;
        int count = 0;

        while (pos != NULL)
        {
            count++;
            pos = pos->next;
        }

        return count;
    }

public:
    void copy(Backtracking Backtracking)
    { // Need to make this clear the old list if exists
        int oldLength = Backtracking.length();
        int iter = 0;

        pos = head;
        for (iter = 0; iter < oldLength; iter++)
        {
            Node temp = new struct node;

            temp->next = NULL;
            temp->value = Backtracking[iter];

            pos->next = temp;
            pos = pos->next;
        }
    }

    /**
     *	@desc Frees all the nodes in the linked list.
     *	@param none
     *	@return none
     */
private:
    void destroy()
    {
        Node temp;
        pos = head;
        while (pos != NULL)
        {
            temp = pos;
            pos = pos->next;
            delete temp;
        }
    }
};

class SudokuSolver
{

    int recursiveCount; // Stats variable
    SudokuManual frame; // The frame object

public:
    SudokuSolver()
    {
        recursiveCount = 0;

        cout << "\nCalculating Backtracking...\n";
        cout << "Backtracking across puzzle....\n";
        cout << "Validating cells and values...\n\n";

        solve();
        cout << "QED. Your puzzle has been solved!\n\n";
        displayFrame();

        cout << "\n\n";
    }

private:
    bool cellValueValid(int row, int col, int currentValue)
    {
        int i, j;

        // Checking if value exists in same column
        for (i = 0; i < 9; i++)
        {
            if (i != row)
            {
                int comparingValue = frame.getCellValue(i, col);
                if (comparingValue == currentValue)
                    return false;
            }
        }

        // Checking if value exists in same row
        for (j = 0; j < 9; j++)
        {
            if (j != col)
            {
                int comparingValue = frame.getCellValue(row, j);
                if (comparingValue == currentValue)
                    return false;
            }
        }

        // Checking if value exists in the same 3x3 square block
        if (ThreeByThreeGridValid(row, col, currentValue) == false)
            return false;

        return true;
    }

private:
    bool ThreeByThreeGridValid(int row, int col, int currentValue)
    {
        int rowStart = (row / 3) * 3;
        int rowEnd = (rowStart + 2);

        int colStart = (col / 3) * 3;
        int colEnd = (colStart + 2);

        int i, j;

        for (i = rowStart; i <= rowEnd; i++)
        {
            for (j = colStart; j <= colEnd; j++)
            {
                if (frame.getCellValue(i, j) == currentValue)
                    return false;
            }
        }

        return true;
    }

private:
    Backtracking getCellBacktracking(int row, int col)
    {
        int iter = 0;

        Backtracking Backtracking;

        for (iter = 1; iter <= 9; iter++)
        {
            if (cellValueValid(row, col, iter) == true)
                Backtracking.append(iter);
        }

        return Backtracking;
    }

private:
    int singleCellSolve(int row, int col)
    {

        statsIncrement(); // This is used to see how many times the func is called.

        if (frame.isEditable(row, col) == true)
        {

            Backtracking Backtracking;
            Backtracking.copy(getCellBacktracking(row, col));

            int posLength = Backtracking.length();
            int posIter = 0, newRow = row, newCol = col;

            for (posIter = 0; posIter < posLength; posIter++)
            { // We iter over the possible values
                int possibility = Backtracking[posIter];
                frame.setCellValue(row, col, possibility);

                // We now increment the col/row values for the next recursion
                if (col < 8)
                    newCol = col + 1;
                else if (col == 8)
                {
                    if (row == 8)
                        return 1; // this means success
                    newRow = row + 1;
                    newCol = 0;
                }

                {

                    if (singleCellSolve(newRow, newCol) == 0)
                    { // If wrong, clear frame and start over
                        frame.clearFrameFrom(newRow, newCol);
                    }
                    else
                        return 1;

                } // Recursion block ends here

            } // Loop ends here

            return 0;

        } // The isEditable() if block ends here.
        else
        {

            int newRow = row, newCol = col;

            // Same incrementing of the col/row values
            if (col < 8)
                newCol = col + 1;
            else if (col == 8)
            {
                if (row == 8)
                    return 1;
                newRow = row + 1;
                newCol = 0;
            }

            return singleCellSolve(newRow, newCol);
        }
    }

private:
    void solve()
    {
        int success = singleCellSolve(0, 0);
    }

private:
    void displayFrame()
    {
        frame.displayFrame();
    }

private:
    void statsIncrement()
    {
        recursiveCount++;
    }

public:
    void statsPrint()
    {
        cout << "\nThe singleCellSolve() function was recursively called " << recursiveCount << " times.\n";
    }
};

int main()
{
    SudokuSolver ss;
    return 0;
}
